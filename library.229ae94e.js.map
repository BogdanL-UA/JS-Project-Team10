{"mappings":"6mBAAA,IAAAA,EAAAC,EAAA,S,aAGMC,EAAsB,SAACC,G,OAAQC,KAAKC,MAAMC,aAAaC,QAAQ,GAAOC,OAAJL,EAAI,W,EAExEM,EAAgBP,EAAoB,WACpCQ,EAAcR,EAAoB,SAEhCS,EAAwB,WAC1BC,EAAAC,KAAKC,QAAQC,UAAY,E,EAGvBC,EAAqB,WACvBJ,EAAAC,KAAKI,iBAAiBC,UAAUC,IAAI,8B,EAgBR,GAAV,MAAjBV,GAAkD,IAAzBA,EAAcW,QAAiC,MAAfV,GAA8C,IAAvBA,EAAYU,OAM1F,IAAIX,EAAcW,OAAS,EAO9B,OAJ4BC,QAApBC,IAAIb,GACZE,IACAK,SACA,EAAAhB,EAAAuB,eAAcd,GAGX,GAAIC,EAAYU,OAAS,EAO5B,OAJcC,QAANC,IAAIZ,GACZC,IAhCAC,EAAAC,KAAKW,eAAeN,UAAUC,IAAI,oCAkClC,EAAAnB,EAAAuB,eAAcb,E,MAlBFC,IACZC,EAAAC,KAAKY,QAAQV,UAAY,6C,0FCjC7B,IAAAW,EAAAzB,EAAA,S,aAgCM0B,EAAkB,IAAI,EAAAD,EAAAE,iBAE5B,SAASC,EAAcC,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAOV,OAAQW,GAAK,EACpCJ,EAAgBK,aAAaF,EAAOC,IAAIE,MAAK,SAAAC,GAvBtB,IAAAC,EAAGC,EAAIC,EAAaC,EAAOC,EAAQC,EAAcC,EAEtEC,EAuBF9B,EAAAC,KAAKC,QAAQ6B,mBAAmB,aAzBNP,GAAHD,EAyB6CD,GAzB1CE,GAAIC,EAAWF,EAAXE,YAAaC,EAAKH,EAALG,MAAOC,EAAMJ,EAANI,OAAQC,EAAYL,EAAZK,aAAcC,EAAYN,EAAZM,aAEtEC,EAZmB,SAACH,GAC1B,OAAIA,EAAOnB,OAAS,EACTmB,EAAOK,KAAI,SAAAC,G,OAASA,EAAMC,I,IAAMC,KAAK,MACnB,IAAlBR,EAAOnB,OACP,YACAmB,EAAOnB,OAAS,EAChBmB,EAAOK,KAAI,SAAAC,G,OAASA,EAAMC,I,IAAME,MAAM,EAAG,GAAGD,KAAK,MAAQ,eAD7D,C,CAOYE,CAAqBV,GACjC,4CAGgD/B,OAFlB4B,EAAG,4GAEoC5B,OAArB6B,EAAY,WAG3B7B,OAHoC8B,EAAM,wIAKnC9B,OAFP8B,EAAM,sGAGA9B,OADCkC,EAAW,+DAEZlC,OADAgC,EAAaQ,MAAM,EAAG,GAAG,6DACQxC,OAAjC0C,OAAOT,GAAcO,MAAM,EAAG,GAAG,yD,qFC1B5E,IAAMG,EAAO,CAChBrC,QAASsC,SAASC,cAAc,kBAChC5B,QAAS2B,SAASC,cAAc,YAChCpC,iBAAkBmC,SAASC,cAAc,gCACzC7B,eAAgB4B,SAASC,cAAc,8B,ICD3CpD,EAAA,S","sources":["src/js/library/on-library-load.js","src/js/library/render-library.js","src/js/library/library-refs.js","src/index-library.js"],"sourcesContent":["import { renderLibrary } from './render-library';\nimport { refs } from './library-refs';\n\nconst getFromLocalStorage = (key) => JSON.parse(localStorage.getItem(`${key}Movies`));\n\nlet watchedMovies = getFromLocalStorage('watched');\nlet queueMovies = getFromLocalStorage('queue');\n\nconst clearLibraryContainer = () => {\n    refs.library.innerHTML = '';\n}\n\nconst activateWatchedBtn = () => {\n    refs.headerWatchedBtn.classList.add('library-header__btn--active');\n}\nconst activateQueueBtn = () => {\n    refs.headerQueueBtn.classList.add('library-header__btn--active');\n}\n\nconst deactivateWatchedBtn = () => {\n    refs.headerWatchedBtn.classList.remove('library-header__btn--active');\n}\n\nconst deactivateQueueBtn = () => {\n    refs.headerQueueBtn.classList.remove('library-header__btn--active');\n}\n\n\n//перевірка localstorage при завантаженні сторінки\nif ((watchedMovies == null || watchedMovies.length === 0) && (queueMovies == null || queueMovies.length === 0)) {\n\n    //в localstorage нічого немає\n    clearLibraryContainer();\n    refs.message.innerHTML = '<p>Ви ще не додали фільми до бібліотеки</p>';\n\n} else if (watchedMovies.length > 0) {\n\n    //в localstorage є переглянуті фільми (пріоритет)\n    console.log(watchedMovies);\n    clearLibraryContainer();\n    activateWatchedBtn();\n    renderLibrary(watchedMovies);\n    return;\n\n} else if (queueMovies.length > 0) {\n\n    //в localstorage є фільми в черзі\n    console.log(queueMovies);\n    clearLibraryContainer();\n    activateQueueBtn();\n    renderLibrary(queueMovies);\n    return;\n\n}\n\n//колбеки для кнопок\nconst onWatchedBtnClick = (event) => {\n\n    event.preventDefault();\n\n    deactivateQueueBtn();\n    activateWatchedBtn();\n\n    clearLibraryContainer();\n\n    if (watchedMovies == null || watchedMovies.length === 0) {\n       refs.message.innerHTML = '<p>Ви ще не додали фільми до списку переглянутих</p>'; \n    } else if (watchedMovies.length > 0) {\n        refs.message.innerHTML = '';\n        renderLibrary(watchedMovies);\n    }\n}\n\n//додаємо прослуховувачі подій на кнопки\n// refs.headerWatchedBtn.addEventListener('click', onWatchedBtnClick);","import { FilmsApiService } from '../api-service';\nimport { refs } from './library-refs';\n\nconst generateGenresString = (genres) => {\n    if (genres.length < 2) {\n        return genres.map(genre => genre.name).join(', ');\n    } else if (genres.length === 0) {\n        return 'no genres';\n    } else if (genres.length > 2) {\n        return genres.map(genre => genre.name).slice(0, 2).join(', ') + ', Other';\n    }\n}\n\nconst createLibraryMovieItem = ({ id, poster_path, title, genres, release_date, vote_average }) => {\n    \n    const genresList = generateGenresString(genres);\n    return `\n    <li class=\"library__item\" data-id=\"${id}\">\n            <div class=\"library__poster\">\n                <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${title}\" class=\"library__image\" />\n            </div>\n            <div class=\"library__meta\">\n                <p class=\"library__title\">${title}</p>\n                <p class=\"library__info\">\n                    <span class=\"library__genre\">${genresList}</span> |\n                    <span class=\"library__year\">${release_date.slice(0, 4)}</span>\n                    <span class=\"library__rate\">${String(vote_average).slice(0, 3)}</span></p>\n            </div>\n        </li>\n    ` ;\n}\n\nconst filmsApiService = new FilmsApiService();\n\nfunction renderLibrary(movies) {\n    for (let i = 0; i < movies.length; i += 1)\n        filmsApiService.getFilmsById(movies[i]).then(response => {\n        \n        refs.library.insertAdjacentHTML('beforeend', createLibraryMovieItem(response));\n    });\n}\n\nexport { renderLibrary };","export const refs = {\n    library: document.querySelector('.library__list'),\n    message: document.querySelector('.message'),\n    headerWatchedBtn: document.querySelector('.library-header__watched-btn'),\n    headerQueueBtn: document.querySelector('.library-header__queue-btn'),\n}","// import './js/create-page-home';\n// import './js/create-search-gallery';\n\nimport './js/pagination';\nimport './js/library/on-library-load';\nimport './js/team-modal';\nimport './js/dark-theme';\n// import './js/scroll';\nimport topUp from './js/top';\n\n// topUp();\n"],"names":["$fEcOw","parcelRequire","getFromLocalStorage","key","JSON","parse","localStorage","getItem","concat","watchedMovies","queueMovies","clearLibraryContainer","$hLDmO","refs","library","innerHTML","activateWatchedBtn","headerWatchedBtn","classList","add","length","console","log","renderLibrary","headerQueueBtn","message","$1h2Gi","$b64488090ba80634$var$filmsApiService","FilmsApiService","$b64488090ba80634$export$e7d1a4959038c5e5","movies","i","getFilmsById","then","response","param","id","poster_path","title","genres","release_date","vote_average","genresList","insertAdjacentHTML","map","genre","name","join","slice","$b64488090ba80634$var$generateGenresString","String","$cef55ce7d6412c7d$export$21666b427502ea6d","document","querySelector"],"version":3,"file":"library.229ae94e.js.map"}